name: Build

on:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'app/**'
      - 'gradle/**'
      - '*.gradle'
      - '*.properties'
  pull_request:
  workflow_dispatch:
    inputs:
      release:
        description: 'Trigger a release build'
        type: boolean
        required: true
        default: false
      lspatch:
        description: 'Apply LSPatch to the build'
        type: boolean
        required: true
        default: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          {
            echo "version=v$(grep versionName app/build.gradle | awk '{print $2}' | tr -d \"\")"
            echo "line_ver_code=$(grep HOOK_TARGET_VERSION app/build.gradle | awk '{print $4}' | tr -d '\"')"
            echo "commit=$(echo ${{ github.sha }} | cut -c-7)"
            echo "repo=$(echo ${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/})"
          } >> $GITHUB_ENV

      - name: Compute LINE version name
        run: echo "line_ver=$(echo '${{ env.line_ver_code }}' | awk '{print substr($0,1,2)"."substr($0,3,2)"."int(substr($0,5,1))}')" >> $GITHUB_ENV

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Get previous version tag
        uses: oprypin/find-latest-tag@v1.1.2
        if: github.event.inputs.release == 'true'
        id: previous
        with:
          repository: ${{ github.repository }}
          releases-only: true

      - name: Validate release inputs
        if: github.event.inputs.release == 'true'
        run: |
          if [ -z "${{ secrets.STORE_FILE }}" ]; then
            echo "ERROR: Signing key is required for releases." >&2
            exit 1
          fi
          if [ "${{ steps.previous.outputs.tag }}" == "${{ env.version }}" ]; then
            echo "ERROR: Duplicate release tag detected." >&2
            exit 1
          fi

      - name: Build APK with Gradle
        run: |
          if [ "${{ github.event.inputs.release }}" == "true" ]; then
            echo "${{ secrets.STORE_FILE }}" | base64 -d > app/release.jks
            export STORE_PASSWORD="${{ secrets.STORE_PASSWORD }}"
            export KEY_ALIAS="${{ secrets.KEY_ALIAS }}"
            export KEY_PASSWORD="${{ secrets.KEY_PASSWORD }}"
            ./gradlew assembleRelease --no-daemon --stacktrace
            cp -f app/build/outputs/apk/release/app-release.apk ${{ env.repo }}-${{ env.version }}.apk
          else
            ./gradlew assembleDebug --no-daemon --stacktrace
          fi

      - name: LSPatch for all architectures
        if: github.event.inputs.lspatch == 'true'
        run: |
          # Define URLs and output file names in the conf file
          cat << EOF > conf
          https://github.com/JingMatrix/LSPatch/releases/latest/download/lspatch.jar
            out=lspatch.jar
          https://d.apkpure.com/b/XAPK/jp.naver.line.android?versionCode=${{ env.line_ver_code }}&nc=arm64-v8a&sv=28
            out=original-arm64-v8a.apk
          https://line-android-universal-download.line-scdn.net/line-14.19.1.apk
            out=original-armeabi-v7a.apk
          https://www.apkmirror.com/apk/line-corporation/line/line-14-19-1-release/line-calls-messages-14-19-1-android-apk-download/download/?key=168fc2e8af120111c350b2943dd89a3841f1546b
            out=original-both.apk
          EOF

          # Download all files using aria2c
          echo "Downloading APKs and LSPatch tool..."
          aria2c --no-conf -x16 -s16 -R -m0 -V --async-dns=false -iconf=conf

          # Patch arm64-v8a APK
          echo "Patching APK for arm64-v8a..."
          java -jar lspatch.jar "original-arm64-v8a.apk" -m "app/build/outputs/apk/debug/app-debug.apk" -l 2 -v
          mv "patched-apk-output.apk" "line-${{ env.line_ver }}-arm64-v8a.apk"

          # Patch armeabi-v7a APK
          echo "Patching APK for armeabi-v7a..."
          java -jar lspatch.jar "original-armeabi-v7a.apk" -m "app/build/outputs/apk/debug/app-debug.apk" -l 2 -v
          mv "patched-apk-output.apk" "line-${{ env.line_ver }}-armeabi-v7a.apk"

          # Patch both architectures APK
          echo "Patching APK for both architectures..."
          java -jar lspatch.jar "original-both.apk" -m "app/build/outputs/apk/debug/app-debug.apk" -l 2 -v
          mv "patched-apk-output.apk" "line-${{ env.line_ver }}-both.apk"

          # Verify generated APKs
          echo "Checking generated APKs..."
          ls -l


      - name: Upload Patched APKs
        uses: actions/upload-artifact@v4
        if: github.event.inputs.lspatch == 'true'
        with:
          name: LINE-${{ env.line_ver }}@${{ env.commit }}
          path: line-${{ env.line_ver }}-*-lspatched.apk
          if-no-files-found: error

      - name: Release the Build
        if: github.event.inputs.release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release for version ${{ env.version }}..."
          gh release create ${{ env.version }} \
            line-${{ env.line_ver }}-arm64-v8a.apk \
            line-${{ env.line_ver }}-armeabi-v7a.apk \
            line-${{ env.line_ver }}-both.apk \
            --title "Release ${{ env.version }}" \
            --notes "## Supported LINE Version\n${{ env.line_ver }}\n\n### Changes\nhttps://github.com/${{ github.repository }}/compare/${{ steps.previous.outputs.tag }}...${{ env.version }}\n\n### Patched Files\nline-${{ env.line_ver }}-arm64-v8a.apk\nline-${{ env.line_ver }}-armeabi-v7a.apk\nline-${{ env.line_ver }}-both.apk"


